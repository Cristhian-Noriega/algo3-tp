Index: Pokemon/pom.xml
===================================================================
diff --git a/Pokemon/pom.xml b/Pokemon/pom.xml
deleted file mode 100644
--- a/Pokemon/pom.xml	(revision a5be3f9e153a762ced014b9f5a9096a1accd7072)
+++ /dev/null	(revision a5be3f9e153a762ced014b9f5a9096a1accd7072)
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <groupId>tp1.clases</groupId>
-    <artifactId>Pokemon</artifactId>
-    <version>1.0-SNAPSHOT</version>
-
-    <properties>
-        <maven.compiler.source>17</maven.compiler.source>
-        <maven.compiler.target>17</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
-    <dependencies>
-        <dependency>
-            <groupId>org.jline</groupId>
-            <artifactId>jline</artifactId>
-            <version>3.23.0</version>
-        </dependency>
-    </dependencies>
-
-
-</project>
\ No newline at end of file
Index: Pokemon/src/main/java/tp1/clases/controlador/ControladorJuego.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tp1.clases.controlador;\n\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport tp1.clases.controlador.comandos.CambiarPokemonComando;\nimport tp1.clases.controlador.comandos.Comando;\nimport tp1.clases.controlador.comandos.UsarHabilidadComando;\nimport tp1.clases.controlador.comandos.UsarItemComando;\nimport tp1.clases.errores.Error;\nimport tp1.clases.modelo.AdministradorDeTurnos;\nimport tp1.clases.modelo.Batalla;\nimport tp1.clases.modelo.Pokemon;\nimport tp1.clases.vista.CampoVista;\nimport tp1.clases.vista.OpcionMenu;\nimport tp1.clases.vista.VistaMenu;\n\nimport java.io.IOException;\nimport java.util.*;\n\n\npublic class ControladorJuego {\n\n    private final Batalla batalla;\n    private AdministradorDeTurnos administradorDeTurnos;\n    private final LineReader reader;\n    private Boolean juegoTerminado = false;\n    private Comando comando;\n    private final ControladorEstados controladorEstados;\n    private ControladorMenu controladorMenu;\n\n    public ControladorJuego(Batalla batalla, ControladorEstados controladorEstados) throws IOException {\n        this.batalla = batalla;\n        this.controladorEstados = controladorEstados;\n        this.administradorDeTurnos = new AdministradorDeTurnos(this.batalla.getJugadores());\n        this.controladorMenu = new ControladorMenu();\n\n        Terminal terminal = TerminalBuilder.terminal();\n        reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n    }\n\n    public void Jugar() {\n        System.out.printf(\"Turno de %s \\n \\n\", this.batalla.getJugadorActual().getNombre());\n        while (!juegoTerminado) {\n\n            if (this.batalla.estaMuertoPokemonActual()) {\n                seleccionarPokemonVivo();\n                this.avanzarTurno();\n                continue;\n            }\n\n\n\n            int opcion = interaccionConUsuario(VistaMenu.mostrarOpciones());\n            //crear pila de menus\n\n            if (!opcionValida(opcion)) {\n                continue;\n            }\n\n            OpcionMenu accion = OpcionMenu.getAccion(opcion);\n\n            if (Objects.equals(accion, OpcionMenu.VER_CAMPO)) {\n                mostrarCampo();\n                continue;\n            }\n\n            if (Objects.equals(accion, OpcionMenu.RENDIRSE)) {\n                this.juegoTerminado = seRindio();\n                break;\n            }\n\n            if (realizarTurno(accion)) {\n                avanzarTurno();\n            }\n        }\n    }\n\npublic void Jugar2() {\n    while (!this.juegoTerminado) {\n\n        System.out.printf(\"Turno de %s \\n \\n\", this.batalla.getJugadorActual().getNombre());\n\n        if (this.batalla.estaMuertoPokemonActual()) {\n            seleccionarPokemonVivo();\n            this.avanzarTurno();\n            continue;\n        }\n\n\n        Menu menuActual = controladorMenu.obtenerMenuActual();\n\n        int opcion = interaccionConUsuario(menuActual.mostrarOpciones());\n\n        menuActual.procesarOpcion(opcion);\n\n        if (!opcionValida(opcion)){\n            continue;\n        }\n\n        OpcionMenu accion = OpcionMenu.getAccion(opcion);\n\n        if (opcion == OpcionMenu.VOLVER_ATRAS.ordinal()) {\n            controladorMenu.retroceder();\n            continue;\n        }\n\n\n\n        controladorMenu.actualizarMenu(accion);\n\n\n\n\n\n        menuActual.actualizarMenu(opcion);\n\n        cambiarEstado(opcion, this.estadoMenu.mostrarAcciones());\n        this.estadoMenu.avanzar();\n        this.administradorDeTurnos.siguienteTurno();\n    }\n}\n\n\n\n    private boolean realizarTurno(OpcionMenu accion){\n        boolean puedeUsarHabilidad = this.controladorEstados.controlarEstado(this.batalla.getJugadorActual(), this.administradorDeTurnos.getTurno());\n\n        while (true) {\n            setComando(accion);\n            //agregar a pilaMenus el menu actualmente en uso\n            String opcionesDisponibles = this.comando.mostrar(); //Menu opciones = pilaMenus.obtenerMenuActual()\n            //comando dejaria de tener un mostrar y seria unicamente para la ejecucion de la accion\n\n            int opcionSiguiente = interaccionConUsuario(opcionesDisponibles); //opcionesDisponobles.mostrarOpciones()\n\n\n            if (opcionSiguiente == OpcionMenu.VOLVER_ATRAS.ordinal()){ //&& accion != item\n                //pilaMenus desapilar\n                return false;\n            } //else if op = volver { pilaMenus.Desapilar; continue;\n\n            if (!opcionValida(opcionSiguiente)){\n                continue;\n            }\n\n            //pilaMenus apilar\n\n            if (accion == OpcionMenu.VER_ITEM){\n                opcionSiguiente = aplicarItemPokemon(opcionSiguiente, opcionesDisponibles, accion); //opcionesDisponobles.mostrarOpciones()\n                if (opcionSiguiente == OpcionMenu.VOLVER_ATRAS.ordinal()) {\n                    return false;\n                }\n            }\n\n            if (accion == OpcionMenu.VER_ITEM){\n                pilaMenus.Apilar(menuPokemon);\n                continue;\n            }\n\n\n                if (opcionSiguiente == OpcionMenu.VER_HABILIDAD.ordinal() && !puedeUsarHabilidad) {\n                System.out.println(\"No puede usar la habilidad.\");\n                return false;\n            }\n\n            int posicion = opcionSiguiente - 1;\n\n            this.comando.definirOpcion(posicion);\n\n            Optional<Error> err = this.comando.ejecutar();\n\n            if (err.isPresent()) {\n                err.get().mostrar();\n                continue;\n            }\n            return true;\n\n        }\n    }\n\n    private void mostrarCampo() {\n        CampoVista campo = new CampoVista();\n        System.out.println(campo.estadoJugador(batalla));\n    }\n\n    private void avanzarTurno() {\n        if (this.batalla.obtenerGanador().isPresent()) {\n            this.juegoTerminado = true;\n        } else {\n            this.batalla.cambiarTurno();\n        }\n    }\n\n    private boolean opcionValida(int opcion) {\n        if (opcion <= 0 || opcion > OpcionMenu.values().length){\n            System.out.println(\"Opcion fuera de rango\");\n            return false;\n        }\n        return true;\n    }\n\n    private boolean seRindio(){\n            String jugadorRendido = this.batalla.getJugadorActual().getNombre();\n            this.batalla.rendir(this.batalla.getJugadorActual());\n            System.out.printf(\"El jugador %s se ha rendido. \\n\", jugadorRendido);\n            return true;\n    }\n\n    public void seleccionarPokemonVivo() {\n        List<Pokemon> pokemones = this.batalla.getPokemonesJugadorActual();\n        while (this.batalla.estaMuertoPokemonActual()) {\n            System.out.println(\"Pokemon debilitado, elija otro pokemon: \");\n            int pokemon = interaccionConUsuario(VistaMenu.mostrarPokemones(pokemones, false));\n            if (pokemon <= 0 || pokemon > pokemones.size()){\n                System.out.println(\"Opcion fuera de rango\");\n                continue;\n            }\n            this.batalla.cambiarPokemon(pokemon-1);\n        }\n    }\n\n\n    private int interaccionConUsuario(String opciones) {\n        System.out.printf(\"Elija su proxima acción: \\n%s\", opciones);\n\n        int opcion;\n        while (true) {\n            try {\n                String opcionElegida = reader.readLine();\n                opcion = Integer.parseInt(opcionElegida);\n                break;\n            } catch (NumberFormatException err) {\n                System.out.println(\"Acción no valida, ingrese el numero de acción elejida:\\n\\n\");\n            }\n        }\n        return opcion;\n    }\n\n    private void setComando(OpcionMenu accion){\n        switch (accion) {\n            case VER_ITEM -> {\n                this.comando = new UsarItemComando(this.batalla, controladorEstados);\n            }\n            case VER_HABILIDAD -> {\n                this.comando = new UsarHabilidadComando(this.batalla, controladorEstados);\n            }\n            case VER_POKEMONES -> {\n                this.comando = new CambiarPokemonComando(this.batalla);\n            }\n        };\n    }\n\n    private int aplicarItemPokemon(int opcion, String siguienteAccion, OpcionMenu accion){\n        List<Pokemon> listaPokemones = this.batalla.getPokemonesJugadorActual();\n\n        while (accion == OpcionMenu.VER_ITEM) {\n            if (opcion == OpcionMenu.VOLVER_ATRAS.ordinal()){\n                break;\n            }\n\n            System.out.println(\"Elija el pokemon al cual aplicarle el item\");\n            int pokemonElegido = interaccionConUsuario(VistaMenu.mostrarPokemones(listaPokemones, true));\n\n            if ((pokemonElegido >= listaPokemones.size()) | (pokemonElegido <= 0)){\n                if (pokemonElegido == OpcionMenu.VOLVER_ATRAS.ordinal()){\n                    return opcion;\n                }\n                System.out.println(\"Opción no valida, fuera de rango\");\n                opcion = interaccionConUsuario(siguienteAccion);\n                continue;\n            }\n            System.out.println(\"DEBUG: opcion seleccionada: \" + opcion);\n            this.comando.definirPokemon(pokemonElegido-1);\n            break;\n        }\n        return opcion;\n    }\n\n    private int aplicarItem(int item) {\n       Stack<OpcionMenu> acciones = new Stack<>();\n       List<Pokemon> listaPokemones = this.batalla.getPokemonesJugadorActual();\n       boolean accionConcretada = false;\n    }\n\n    public Boolean getJuegoTerminado() {\n        return juegoTerminado;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pokemon/src/main/java/tp1/clases/controlador/ControladorJuego.java b/Pokemon/src/main/java/tp1/clases/controlador/ControladorJuego.java
--- a/Pokemon/src/main/java/tp1/clases/controlador/ControladorJuego.java	(revision a5be3f9e153a762ced014b9f5a9096a1accd7072)
+++ b/Pokemon/src/main/java/tp1/clases/controlador/ControladorJuego.java	(date 1697589240897)
@@ -79,50 +79,50 @@
         }
     }
 
-public void Jugar2() {
-    while (!this.juegoTerminado) {
-
-        System.out.printf("Turno de %s \n \n", this.batalla.getJugadorActual().getNombre());
-
-        if (this.batalla.estaMuertoPokemonActual()) {
-            seleccionarPokemonVivo();
-            this.avanzarTurno();
-            continue;
-        }
-
-
-        Menu menuActual = controladorMenu.obtenerMenuActual();
-
-        int opcion = interaccionConUsuario(menuActual.mostrarOpciones());
-
-        menuActual.procesarOpcion(opcion);
-
-        if (!opcionValida(opcion)){
-            continue;
-        }
-
-        OpcionMenu accion = OpcionMenu.getAccion(opcion);
-
-        if (opcion == OpcionMenu.VOLVER_ATRAS.ordinal()) {
-            controladorMenu.retroceder();
-            continue;
-        }
-
-
-
-        controladorMenu.actualizarMenu(accion);
-
-
-
-
-
-        menuActual.actualizarMenu(opcion);
-
-        cambiarEstado(opcion, this.estadoMenu.mostrarAcciones());
-        this.estadoMenu.avanzar();
-        this.administradorDeTurnos.siguienteTurno();
-    }
-}
+//public void Jugar2() {
+//    while (!this.juegoTerminado) {
+//
+//        System.out.printf("Turno de %s \n \n", this.batalla.getJugadorActual().getNombre());
+//
+//        if (this.batalla.estaMuertoPokemonActual()) {
+//            seleccionarPokemonVivo();
+//            this.avanzarTurno();
+//            continue;
+//        }
+//
+//
+//        Menu menuActual = controladorMenu.obtenerMenuActual();
+//
+//        int opcion = interaccionConUsuario(menuActual.mostrarOpciones());
+//
+//        menuActual.procesarOpcion(opcion);
+//
+//        if (!opcionValida(opcion)){
+//            continue;
+//        }
+//
+//        OpcionMenu accion = OpcionMenu.getAccion(opcion);
+//
+//        if (opcion == OpcionMenu.VOLVER_ATRAS.ordinal()) {
+//            controladorMenu.retroceder();
+//            continue;
+//        }
+//
+//
+//
+//        controladorMenu.actualizarMenu(accion);
+//
+//
+//
+//
+//
+//        menuActual.actualizarMenu(opcion);
+//
+//        cambiarEstado(opcion, this.estadoMenu.mostrarAcciones());
+//        this.estadoMenu.avanzar();
+//        this.administradorDeTurnos.siguienteTurno();
+//    }
+//}
 
 
 
@@ -156,10 +156,10 @@
                 }
             }
 
-            if (accion == OpcionMenu.VER_ITEM){
-                pilaMenus.Apilar(menuPokemon);
-                continue;
-            }
+//            if (accion == OpcionMenu.VER_ITEM){
+//                pilaMenus.Apilar(menuPokemon);
+//                continue;
+//            }
 
 
                 if (opcionSiguiente == OpcionMenu.VER_HABILIDAD.ordinal() && !puedeUsarHabilidad) {
