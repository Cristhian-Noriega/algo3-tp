Index: src/main/java/tp1/clases/Inicializador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tp1.clases;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport tp1.clases.modelo.*;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class Inicializador {\n\n    public static ArrayList<Jugador> iniciarJugadores() throws IOException, CloneNotSupportedException {\n\n        Map<Integer, Item> listaItems = crearListaItems();\n\n        Map<Integer, Habilidad> listaHabilidades = crearListaHabilidades();\n\n        Map<Integer, Pokemon> listaPokemones = crearListaPokemones(listaHabilidades);\n\n        return crearListaJugadores(listaPokemones, listaItems);\n\n    }\n\n    private static Map<Integer, Item> crearListaItems() throws IOException {\n        String pathItems = \"resources/json/items.json\";\n\n        Map<Integer,Item> listaItems = new HashMap<>();\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        JsonNode listaItemsNode = objectMapper.readTree(new File(pathItems));\n        for (JsonNode itemNode : listaItemsNode) {\n            Categoria categoria = Categoria.valueOf(itemNode.get(\"categoria\").asText());\n            String nombre = itemNode.get(\"nombre\").asText();\n            int id = itemNode.get(\"id\").asInt();\n\n            Item item = null;\n            switch (categoria){\n                case ESTADO:\n                    item = new ItemEstado(nombre, id);\n                    listaItems.put(id, item);\n                    continue;\n                case ESTADISTICA:\n                    Estadisticas estadistica = Estadisticas.valueOf(itemNode.get(\"estadistica\").asText());\n                    item = new ItemEstadistica(nombre, estadistica, id);\n                    listaItems.put(id, item);\n                    continue;\n                case VIDA:\n                    int vida = itemNode.get(\"vida\").asInt();\n                    if (Objects.equals(nombre, \"Revivir\")){\n                        item = new ItemRevivir(nombre, vida, id);\n                    } else {\n                        item = new ItemRestauracionVida(nombre, vida, id);\n                    }\n                    listaItems.put(id, item);\n            }\n        }\n        return listaItems;\n    }\n\n\n    private static Map<Integer, Habilidad> crearListaHabilidades() throws IOException {\n        String pathHabilidades = \"resources/json/habilidades.json\";\n\n        Map<Integer,Habilidad> listaHabilidades = new HashMap<>();\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        JsonNode listaHabilidadesNode = objectMapper.readTree(new File(pathHabilidades));\n        for (JsonNode habilidadNodo : listaHabilidadesNode) {\n            Categoria categoria = Categoria.valueOf(habilidadNodo.get(\"categoria\").asText());\n            String nombre = habilidadNodo.get(\"nombre\").asText();\n            int id = habilidadNodo.get(\"id\").asInt();\n            String info = habilidadNodo.get(\"info\").asText();\n            Tipo tipo = Tipo.valueOf(habilidadNodo.get(\"tipo\").asText());\n            int usos = habilidadNodo.get(\"usos\").asInt();\n\n            Habilidad habilidad = null;\n            switch (categoria){\n                case ATAQUE:\n                    int poder = habilidadNodo.get(\"poder\").asInt();\n                    habilidad = new HabilidadAtaque(nombre, usos, tipo, poder, info, id);\n                    listaHabilidades.put(id, habilidad);\n                    continue;\n\n                case ESTADO:\n                    Estado estado = Estado.valueOf(habilidadNodo.get(\"estado\").asText());\n                    habilidad = new HabilidadEstado(nombre, usos, tipo, info, estado, id);\n                    listaHabilidades.put(id, habilidad);\n                    continue;\n\n                case ESTADISTICA:\n                    Estadisticas estadistica = Estadisticas.valueOf(habilidadNodo.get(\"estadistica\").asText());\n                    boolean contraRival = habilidadNodo.get(\"contraRival\").asBoolean();\n                    habilidad = new HabilidadEstadistica(nombre, usos, tipo, info, estadistica, contraRival, id);\n                    listaHabilidades.put(id, habilidad);\n                    continue;\n                    \n                case CLIMA:\n                    Clima clima = Clima.valueOf(habilidadNodo.get(\"clima\").asText());\n                    habilidad = new HabilidadClima(nombre, usos, tipo, info, clima, id);\n                    listaHabilidades.put(id, habilidad);\n            }\n        }\n        return listaHabilidades;\n\n    }\n\n    private static Map<Integer, Pokemon> crearListaPokemones(Map<Integer, Habilidad> listaHabilidades) throws IOException, CloneNotSupportedException {\n        String pathPokemones = \"resources/json/pokemones.json\";\n\n        Map<Integer, Pokemon> listaPokemones = new HashMap<>();\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        JsonNode pokemonesNode = objectMapper.readTree(new File(pathPokemones));\n        for (JsonNode pokeNode : pokemonesNode) {\n            double ataque = pokeNode.get(\"ataque\").asDouble();\n            double defensa = pokeNode.get(\"defensa\").asDouble();\n\n            ArrayList<Habilidad> habilidades =  new ArrayList<Habilidad>();\n            JsonNode habilidadesNode = pokeNode.get(\"habilidades\");\n            if (habilidadesNode != null && habilidadesNode.isArray()) {\n                Iterator<JsonNode> habilidadesElements = habilidadesNode.elements();\n                while (habilidadesElements.hasNext()) {\n                    int habilidadIndex = habilidadesElements.next().asInt();\n                    if (habilidadIndex <= listaHabilidades.size()){\n                        Habilidad habilidad = listaHabilidades.get(habilidadIndex);\n                        habilidades.add(habilidad.clone());\n                    }\n                }\n            }\n\n            int id = pokeNode.get(\"id\").asInt();\n            int nivel = pokeNode.get(\"nivel\").asInt();\n            String nombre = pokeNode.get(\"nombre\").asText();\n            Tipo tipo = Tipo.valueOf(pokeNode.get(\"tipo\").asText());\n            double velocidad = pokeNode.get(\"velocidad\").asDouble();\n            int vidaMax = pokeNode.get(\"vidaMax\").asInt();\n\n            Pokemon poke = new Pokemon(nombre, nivel, tipo, habilidades, vidaMax, velocidad, ataque, defensa, id);\n            listaPokemones.put(id, poke);\n        }\n\n        return listaPokemones;\n    }\n\n    private static ArrayList<Jugador> crearListaJugadores(Map<Integer, Pokemon> listaPokemones, Map<Integer, Item> listaItems) throws IOException, CloneNotSupportedException {\n        String pathJugadores = \"resources/json/jugadores.json\";\n\n        ArrayList<Jugador> listaJugadores = new ArrayList<Jugador>();\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        JsonNode jugadoresNode = objectMapper.readTree(new File(pathJugadores));\n        for (JsonNode jugNode : jugadoresNode) {\n            String nombre = jugNode.get(\"nombre\").asText();\n\n            ArrayList<Pokemon> pokemones = new ArrayList<Pokemon>();\n            JsonNode pokeJugadorNode = jugNode.get(\"pokemones\");\n            if (pokeJugadorNode != null && pokeJugadorNode.isArray()) {\n                Iterator<JsonNode> pokeElem = pokeJugadorNode.elements();\n                while (pokeElem.hasNext()) {\n                    int pokeIndex = pokeElem.next().asInt();\n                    if (pokeIndex <= listaPokemones.size()){\n                        pokemones.add(listaPokemones.get(pokeIndex));\n                    }\n                }\n            }\n\n            ArrayList<Item> items = new ArrayList<Item>();\n            JsonNode itemsNode = jugNode.get(\"items\");\n            if (itemsNode != null && itemsNode.isArray()) {\n                Iterator<JsonNode> itemElem = itemsNode.elements();\n                while (itemElem.hasNext()) {\n                    int itemIndex = itemElem.next().asInt();\n                    if (itemIndex <= listaItems.size()){\n                        Item item = listaItems.get(itemIndex);\n                        items.add(item.clone());\n                    }\n                }\n            }\n\n            Jugador jugador = new Jugador(nombre, pokemones, items);\n            listaJugadores.add(jugador);\n        }\n\n\n        return listaJugadores;\n    }\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tp1/clases/Inicializador.java b/src/main/java/tp1/clases/Inicializador.java
--- a/src/main/java/tp1/clases/Inicializador.java	(revision c0d3b187ca725cd99832787ee55d0ee8a3c89915)
+++ b/src/main/java/tp1/clases/Inicializador.java	(date 1700681036244)
@@ -97,7 +97,7 @@
                     habilidad = new HabilidadEstadistica(nombre, usos, tipo, info, estadistica, contraRival, id);
                     listaHabilidades.put(id, habilidad);
                     continue;
-                    
+
                 case CLIMA:
                     Clima clima = Clima.valueOf(habilidadNodo.get("clima").asText());
                     habilidad = new HabilidadClima(nombre, usos, tipo, info, clima, id);
