Index: src/main/java/tp1/clases/Inicializador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tp1.clases;\n\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport tp1.clases.modelo.Item;\nimport tp1.clases.modelo.Jugador;\nimport tp1.clases.modelo.Pokemon;\nimport tp1.clases.modelo.Proveedor;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Inicializador {\n    private final LineReader reader;\n\n    private final ArrayList<Jugador> jugadores;\n\n    public Inicializador() throws IOException {\n        this.jugadores = new ArrayList<Jugador>();\n\n        Terminal terminal = TerminalBuilder.terminal();\n        reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n    }\n\n    public ArrayList<Jugador> iniciarJugadores(int cantJugadores){\n        Proveedor proveedor = new Proveedor();\n        List<List<Pokemon>> pokemones = proveedor.getPokemones();\n        List<List<Item>> items = proveedor.getItems();\n\n        int i = 1;\n        while (i <= cantJugadores){\n            System.out.println(\"Por favor ingrese el nombre del jugador \" + i);\n            String nombre = reader.readLine();\n            if (nombre.length() > 50) {\n                System.out.println(\"El nombre no puede tener mas de 50 caracteres \\n\");\n                continue;\n            }\n            Jugador jugador = new Jugador(nombre, pokemones.get(i-1), items.get(i-1));\n            i++;\n            this.jugadores.add(jugador);\n        }\n\n        return this.jugadores;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tp1/clases/Inicializador.java b/src/main/java/tp1/clases/Inicializador.java
--- a/src/main/java/tp1/clases/Inicializador.java	(revision c1cbf617343f3bc72866b227505ec1c16594881c)
+++ b/src/main/java/tp1/clases/Inicializador.java	(date 1700681460032)
@@ -1,51 +1,197 @@
 package tp1.clases;
 
-import org.jline.reader.LineReader;
-import org.jline.reader.LineReaderBuilder;
-import org.jline.terminal.Terminal;
-import org.jline.terminal.TerminalBuilder;
-import tp1.clases.modelo.Item;
-import tp1.clases.modelo.Jugador;
-import tp1.clases.modelo.Pokemon;
-import tp1.clases.modelo.Proveedor;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 
+import tp1.clases.modelo.*;
+
+import java.io.File;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
 
 public class Inicializador {
-    private final LineReader reader;
+
+    public static ArrayList<Jugador> iniciarJugadores() throws IOException, CloneNotSupportedException {
 
-    private final ArrayList<Jugador> jugadores;
+        Map<Integer, Item> listaItems = crearListaItems();
 
-    public Inicializador() throws IOException {
-        this.jugadores = new ArrayList<Jugador>();
+        Map<Integer, Habilidad> listaHabilidades = crearListaHabilidades();
 
-        Terminal terminal = TerminalBuilder.terminal();
-        reader = LineReaderBuilder.builder()
-                .terminal(terminal)
-                .build();
+        Map<Integer, Pokemon> listaPokemones = crearListaPokemones(listaHabilidades);
+
+        return crearListaJugadores(listaPokemones, listaItems);
+
     }
 
-    public ArrayList<Jugador> iniciarJugadores(int cantJugadores){
-        Proveedor proveedor = new Proveedor();
-        List<List<Pokemon>> pokemones = proveedor.getPokemones();
-        List<List<Item>> items = proveedor.getItems();
+    private static Map<Integer, Item> crearListaItems() throws IOException {
+        String pathItems = "resources/json/items.json";
 
-        int i = 1;
-        while (i <= cantJugadores){
-            System.out.println("Por favor ingrese el nombre del jugador " + i);
-            String nombre = reader.readLine();
-            if (nombre.length() > 50) {
-                System.out.println("El nombre no puede tener mas de 50 caracteres \n");
-                continue;
+        Map<Integer,Item> listaItems = new HashMap<>();
+
+        ObjectMapper objectMapper = new ObjectMapper();
+
+        JsonNode listaItemsNode = objectMapper.readTree(new File(pathItems));
+        for (JsonNode itemNode : listaItemsNode) {
+            Categoria categoria = Categoria.valueOf(itemNode.get("categoria").asText());
+            String nombre = itemNode.get("nombre").asText();
+            int id = itemNode.get("id").asInt();
+
+            Item item = null;
+            switch (categoria){
+                case ESTADO:
+                    item = new ItemEstado(nombre, id);
+                    listaItems.put(id, item);
+                    continue;
+                case ESTADISTICA:
+                    Estadisticas estadistica = Estadisticas.valueOf(itemNode.get("estadistica").asText());
+                    item = new ItemEstadistica(nombre, estadistica, id);
+                    listaItems.put(id, item);
+                    continue;
+                case VIDA:
+                    int vida = itemNode.get("vida").asInt();
+                    if (Objects.equals(nombre, "Revivir")){
+                        item = new ItemRevivir(nombre, vida, id);
+                    } else {
+                        item = new ItemRestauracionVida(nombre, vida, id);
+                    }
+                    listaItems.put(id, item);
+            }
+        }
+        return listaItems;
+    }
+
+
+    private static Map<Integer, Habilidad> crearListaHabilidades() throws IOException {
+        String pathHabilidades = "resources/json/habilidades.json";
+
+        Map<Integer,Habilidad> listaHabilidades = new HashMap<>();
+
+        ObjectMapper objectMapper = new ObjectMapper();
+
+        JsonNode listaHabilidadesNode = objectMapper.readTree(new File(pathHabilidades));
+        for (JsonNode habilidadNodo : listaHabilidadesNode) {
+            Categoria categoria = Categoria.valueOf(habilidadNodo.get("categoria").asText());
+            String nombre = habilidadNodo.get("nombre").asText();
+            int id = habilidadNodo.get("id").asInt();
+            String info = habilidadNodo.get("info").asText();
+            Tipo tipo = Tipo.valueOf(habilidadNodo.get("tipo").asText());
+            int usos = habilidadNodo.get("usos").asInt();
+
+            Habilidad habilidad = null;
+            switch (categoria){
+                case ATAQUE:
+                    int poder = habilidadNodo.get("poder").asInt();
+                    habilidad = new HabilidadAtaque(nombre, usos, tipo, poder, info, id);
+                    listaHabilidades.put(id, habilidad);
+                    continue;
+
+                case ESTADO:
+                    Estado estado = Estado.valueOf(habilidadNodo.get("estado").asText());
+                    habilidad = new HabilidadEstado(nombre, usos, tipo, info, estado, id);
+                    listaHabilidades.put(id, habilidad);
+                    continue;
+
+                case ESTADISTICA:
+                    Estadisticas estadistica = Estadisticas.valueOf(habilidadNodo.get("estadistica").asText());
+                    boolean contraRival = habilidadNodo.get("contraRival").asBoolean();
+                    habilidad = new HabilidadEstadistica(nombre, usos, tipo, info, estadistica, contraRival, id);
+                    listaHabilidades.put(id, habilidad);
+                    continue;
+                    
+                case CLIMA:
+                    Clima clima = Clima.valueOf(habilidadNodo.get("clima").asText());
+                    habilidad = new HabilidadClima(nombre, usos, tipo, info, clima, id);
+                    listaHabilidades.put(id, habilidad);
             }
-            Jugador jugador = new Jugador(nombre, pokemones.get(i-1), items.get(i-1));
-            i++;
-            this.jugadores.add(jugador);
         }
+        return listaHabilidades;
+
+    }
+
+    private static Map<Integer, Pokemon> crearListaPokemones(Map<Integer, Habilidad> listaHabilidades) throws IOException, CloneNotSupportedException {
+        String pathPokemones = "resources/json/pokemones.json";
+
+        Map<Integer, Pokemon> listaPokemones = new HashMap<>();
+
+        ObjectMapper objectMapper = new ObjectMapper();
+
+        JsonNode pokemonesNode = objectMapper.readTree(new File(pathPokemones));
+        for (JsonNode pokeNode : pokemonesNode) {
+            double ataque = pokeNode.get("ataque").asDouble();
+            double defensa = pokeNode.get("defensa").asDouble();
+
+            ArrayList<Habilidad> habilidades =  new ArrayList<Habilidad>();
+            JsonNode habilidadesNode = pokeNode.get("habilidades");
+            if (habilidadesNode != null && habilidadesNode.isArray()) {
+                Iterator<JsonNode> habilidadesElements = habilidadesNode.elements();
+                while (habilidadesElements.hasNext()) {
+                    int habilidadIndex = habilidadesElements.next().asInt();
+                    if (habilidadIndex <= listaHabilidades.size()){
+                        Habilidad habilidad = listaHabilidades.get(habilidadIndex);
+                        habilidades.add(habilidad.clone());
+                    }
+                }
+            }
 
-        return this.jugadores;
+            int id = pokeNode.get("id").asInt();
+            int nivel = pokeNode.get("nivel").asInt();
+            String nombre = pokeNode.get("nombre").asText();
+            Tipo tipo = Tipo.valueOf(pokeNode.get("tipo").asText());
+            double velocidad = pokeNode.get("velocidad").asDouble();
+            int vidaMax = pokeNode.get("vidaMax").asInt();
+
+            Pokemon poke = new Pokemon(nombre, nivel, tipo, habilidades, vidaMax, velocidad, ataque, defensa, id);
+            listaPokemones.put(id, poke);
+        }
+
+        return listaPokemones;
     }
+
+    private static ArrayList<Jugador> crearListaJugadores(Map<Integer, Pokemon> listaPokemones, Map<Integer, Item> listaItems) throws IOException, CloneNotSupportedException {
+        String pathJugadores = "resources/json/jugadores.json";
+
+        ArrayList<Jugador> listaJugadores = new ArrayList<Jugador>();
+
+        ObjectMapper objectMapper = new ObjectMapper();
+
+        JsonNode jugadoresNode = objectMapper.readTree(new File(pathJugadores));
+        for (JsonNode jugNode : jugadoresNode) {
+            String nombre = jugNode.get("nombre").asText();
+
+            ArrayList<Pokemon> pokemones = new ArrayList<Pokemon>();
+            JsonNode pokeJugadorNode = jugNode.get("pokemones");
+            if (pokeJugadorNode != null && pokeJugadorNode.isArray()) {
+                Iterator<JsonNode> pokeElem = pokeJugadorNode.elements();
+                while (pokeElem.hasNext()) {
+                    int pokeIndex = pokeElem.next().asInt();
+                    if (pokeIndex <= listaPokemones.size()){
+                        pokemones.add(listaPokemones.get(pokeIndex));
+                    }
+                }
+            }
+
+            ArrayList<Item> items = new ArrayList<Item>();
+            JsonNode itemsNode = jugNode.get("items");
+            if (itemsNode != null && itemsNode.isArray()) {
+                Iterator<JsonNode> itemElem = itemsNode.elements();
+                while (itemElem.hasNext()) {
+                    int itemIndex = itemElem.next().asInt();
+                    if (itemIndex <= listaItems.size()){
+                        Item item = listaItems.get(itemIndex);
+                        items.add(item.clone());
+                    }
+                }
+            }
+
+            Jugador jugador = new Jugador(nombre, pokemones, items);
+            listaJugadores.add(jugador);
+        }
+
+
+        return listaJugadores;
+    }
+
+
+
 
 }
